
PermittivityMeterHL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080044f4  080044f4  000054f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800453c  0800453c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004544  08004544  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00005544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800454c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004558  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004558  0000612c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f27f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6a  00000000  00000000  000152bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00017228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  00017f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f55  00000000  00000000  000189d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb8  00000000  00000000  0003f92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8aef  00000000  00000000  0004e7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001472d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  00147318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014ab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044dc 	.word	0x080044dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044dc 	.word	0x080044dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb39 	bl	8000b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80a 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f954 	bl	80007ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000504:	f000 f868 	bl	80005d8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000508:	f000 f8dc 	bl	80006c4 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f91e 	bl	800074c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x1c>

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	@ 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	@ 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 ffad 	bl	8004482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800053a:	f001 ff3b 	bl	80023b4 <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f97e 	bl	8000844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000548:	230a      	movs	r3, #10
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000550:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000552:	2310      	movs	r3, #16
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000566:	230a      	movs	r3, #10
 8000568:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f001 ff70 	bl	8002460 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000586:	f000 f95d 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fb38 	bl	8002c18 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ae:	f000 f949 	bl	8000844 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <SystemClock_Config+0xc0>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <SystemClock_Config+0xc0>)
 80005b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005bc:	60d3      	str	r3, [r2, #12]
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80005be:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80005c2:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 80005c6:	2000      	movs	r0, #0
 80005c8:	f002 fc26 	bl	8002e18 <HAL_RCC_MCOConfig>
}
 80005cc:	bf00      	nop
 80005ce:	3758      	adds	r7, #88	@ 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 80005fc:	4a2f      	ldr	r2, [pc, #188]	@ (80006bc <MX_ADC1_Init+0xe4>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000600:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060c:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800061a:	2204      	movs	r2, #4
 800061c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061e:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000626:	2201      	movs	r2, #1
 8000628:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800062a:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800062c:	2201      	movs	r2, #1
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 800065c:	f000 fcac 	bl	8000fb8 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000666:	f000 f8ed 	bl	8000844 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 8000676:	f001 fa07 	bl	8001a88 <HAL_ADCEx_MultiModeConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000680:	f000 f8e0 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_ADC1_Init+0xe8>)
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000688:	2306      	movs	r3, #6
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000690:	237f      	movs	r3, #127	@ 0x7f
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_ADC1_Init+0xe0>)
 80006a2:	f000 fdd9 	bl	8001258 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006ac:	f000 f8ca 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	50040000 	.word	0x50040000
 80006c0:	14f00020 	.word	0x14f00020

080006c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2224      	movs	r2, #36	@ 0x24
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fed6 	bl	8004482 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_DAC1_Init+0x80>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DAC1_Init+0x84>)
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006dc:	4819      	ldr	r0, [pc, #100]	@ (8000744 <MX_DAC1_Init+0x80>)
 80006de:	f001 fb68 	bl	8001db2 <HAL_DAC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006e8:	f000 f8ac 	bl	8000844 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_ENABLE;
 80006ec:	2304      	movs	r3, #4
 80006ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_SampleAndHoldConfig.DAC_SampleTime = 10;
 8000700:	230a      	movs	r3, #10
 8000702:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_SampleAndHoldConfig.DAC_HoldTime = 1000;
 8000704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000708:	623b      	str	r3, [r7, #32]
  sConfig.DAC_SampleAndHoldConfig.DAC_RefreshTime = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <MX_DAC1_Init+0x80>)
 8000716:	f001 fb6e 	bl	8001df6 <HAL_DAC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DAC1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f890 	bl	8000844 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2210      	movs	r2, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <MX_DAC1_Init+0x80>)
 800072c:	f001 fb63 	bl	8001df6 <HAL_DAC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_DAC1_Init+0x76>
  {
    Error_Handler();
 8000736:	f000 f885 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40007400 	.word	0x40007400

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f003 f956 	bl	8003a40 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f853 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_GPIO_Init+0x90>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <MX_GPIO_Init+0x90>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_GPIO_Init+0x90>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_GPIO_Init+0x90>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_GPIO_Init+0x90>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_GPIO_Init+0x90>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_GPIO_Init+0x94>)
 800080a:	f001 fc1b 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800080e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f001 fc09 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	@ 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	@ 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ac      	sub	sp, #176	@ 0xb0
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2288      	movs	r2, #136	@ 0x88
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fde2 	bl	8004482 <memset>
  if(hadc->Instance==ADC1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a26      	ldr	r2, [pc, #152]	@ (800095c <HAL_ADC_MspInit+0xc4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d145      	bne.n	8000954 <HAL_ADC_MspInit+0xbc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI2;
 80008ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2N = 10;
 80008de:	230a      	movs	r3, #10
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV7;
 80008e2:	2307      	movs	r3, #7
 80008e4:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_ADC2CLK;
 80008ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fbe7 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000900:	f7ff ffa0 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 800090a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <HAL_ADC_MspInit+0xc8>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800093a:	230b      	movs	r3, #11
 800093c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f001 fb78 	bl	8002044 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000954:	bf00      	nop
 8000956:	37b0      	adds	r7, #176	@ 0xb0
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	50040000 	.word	0x50040000
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <HAL_DAC_MspInit+0x74>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d124      	bne.n	80009d0 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 800098c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000990:	6593      	str	r3, [r2, #88]	@ 0x58
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_DAC_MspInit+0x78>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009b6:	2330      	movs	r3, #48	@ 0x30
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009cc:	f001 fb3a 	bl	8002044 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40007400 	.word	0x40007400
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	@ 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	@ 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fd3e 	bl	8004482 <memset>
  if(huart->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_UART_MspInit+0xb0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13b      	bne.n	8000a88 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000a14:	2304      	movs	r3, #4
 8000a16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fb53 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff ff0c 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 fade 	bl	8002044 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	37b0      	adds	r7, #176	@ 0xb0
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f893 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 fca3 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4e:	f7ff fcd1 	bl	80004f4 <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	0800454c 	.word	0x0800454c
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	2000012c 	.word	0x2000012c

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>

08000b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f001 f8e7 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f80e 	bl	8000ba0 <HAL_InitTick>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	e001      	b.n	8000b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b90:	f7ff fe5e 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d023      	beq.n	8000bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_InitTick+0x70>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f8e5 	bl	8001d9a <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d809      	bhi.n	8000bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f001 f8bd 	bl	8001d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e001      	b.n	8000c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000128 	.word	0x20000128

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000128 	.word	0x20000128

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffde 	bl	8000c40 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	609a      	str	r2, [r3, #8]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3360      	adds	r3, #96	@ 0x60
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <LL_ADC_SetOffset+0x44>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	4313      	orrs	r3, r2
 8000d38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	03fff000 	.word	0x03fff000

08000d50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3360      	adds	r3, #96	@ 0x60
 8000d5e:	461a      	mov	r2, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3360      	adds	r3, #96	@ 0x60
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b087      	sub	sp, #28
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3330      	adds	r3, #48	@ 0x30
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	4413      	add	r3, r2
 8000dd0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	211f      	movs	r1, #31
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0e9b      	lsrs	r3, r3, #26
 8000dea:	f003 011f 	and.w	r1, r3, #31
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b087      	sub	sp, #28
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3314      	adds	r3, #20
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0e5b      	lsrs	r3, r3, #25
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	0d1b      	lsrs	r3, r3, #20
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2107      	movs	r1, #7
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	401a      	ands	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	0d1b      	lsrs	r3, r3, #20
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0318 	and.w	r3, r3, #24
 8000e82:	4908      	ldr	r1, [pc, #32]	@ (8000ea4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e84:	40d9      	lsrs	r1, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	400b      	ands	r3, r1
 8000e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0007ffff 	.word	0x0007ffff

08000ea8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6093      	str	r3, [r2, #8]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ee0:	d101      	bne.n	8000ee6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <LL_ADC_IsEnabled+0x18>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <LL_ADC_IsEnabled+0x1a>
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d101      	bne.n	8000f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d101      	bne.n	8000fa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e130      	b.n	8001234 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fc59 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff67 	bl	8000ecc <LL_ADC_IsDeepPowerDownEnabled>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff4d 	bl	8000ea8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff82 	bl	8000f1c <LL_ADC_IsInternalRegulatorEnabled>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d115      	bne.n	800104a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff66 	bl	8000ef4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001028:	4b84      	ldr	r3, [pc, #528]	@ (800123c <HAL_ADC_Init+0x284>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	4a84      	ldr	r2, [pc, #528]	@ (8001240 <HAL_ADC_Init+0x288>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	099b      	lsrs	r3, r3, #6
 8001036:	3301      	adds	r3, #1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3b01      	subs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff64 	bl	8000f1c <LL_ADC_IsInternalRegulatorEnabled>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800105e:	f043 0210 	orr.w	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff75 	bl	8000f6a <LL_ADC_REG_IsConversionOngoing>
 8001080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80c9 	bne.w	8001222 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 80c5 	bne.w	8001222 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800109c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010a0:	f043 0202 	orr.w	r2, r3, #2
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff49 	bl	8000f44 <LL_ADC_IsEnabled>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d115      	bne.n	80010e4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010b8:	4862      	ldr	r0, [pc, #392]	@ (8001244 <HAL_ADC_Init+0x28c>)
 80010ba:	f7ff ff43 	bl	8000f44 <LL_ADC_IsEnabled>
 80010be:	4604      	mov	r4, r0
 80010c0:	4861      	ldr	r0, [pc, #388]	@ (8001248 <HAL_ADC_Init+0x290>)
 80010c2:	f7ff ff3f 	bl	8000f44 <LL_ADC_IsEnabled>
 80010c6:	4603      	mov	r3, r0
 80010c8:	431c      	orrs	r4, r3
 80010ca:	4860      	ldr	r0, [pc, #384]	@ (800124c <HAL_ADC_Init+0x294>)
 80010cc:	f7ff ff3a 	bl	8000f44 <LL_ADC_IsEnabled>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4323      	orrs	r3, r4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	485c      	ldr	r0, [pc, #368]	@ (8001250 <HAL_ADC_Init+0x298>)
 80010e0:	f7ff fdde 	bl	8000ca0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e5b      	ldrb	r3, [r3, #25]
 80010e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80010f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80010fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001102:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	3b01      	subs	r3, #1
 8001118:	045b      	lsls	r3, r3, #17
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001134:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	4b44      	ldr	r3, [pc, #272]	@ (8001254 <HAL_ADC_Init+0x29c>)
 8001144:	4013      	ands	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	430b      	orrs	r3, r1
 800114e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff1b 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 800115a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d13d      	bne.n	80011de <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d13a      	bne.n	80011de <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800116c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001174:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	69b9      	ldr	r1, [r7, #24]
 800118e:	430b      	orrs	r3, r1
 8001190:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001198:	2b01      	cmp	r3, #1
 800119a:	d118      	bne.n	80011ce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011b2:	4311      	orrs	r1, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80011b8:	4311      	orrs	r1, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80011be:	430a      	orrs	r2, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	e007      	b.n	80011de <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10c      	bne.n	8001200 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f023 010f 	bic.w	r1, r3, #15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80011fe:	e007      	b.n	8001210 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020f 	bic.w	r2, r2, #15
 800120e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001214:	f023 0303 	bic.w	r3, r3, #3
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001220:	e007      	b.n	8001232 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001226:	f043 0210 	orr.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001232:	7ffb      	ldrb	r3, [r7, #31]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3724      	adds	r7, #36	@ 0x24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	053e2d63 	.word	0x053e2d63
 8001244:	50040000 	.word	0x50040000
 8001248:	50040100 	.word	0x50040100
 800124c:	50040200 	.word	0x50040200
 8001250:	50040300 	.word	0x50040300
 8001254:	fff0c007 	.word	0xfff0c007

08001258 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b6      	sub	sp, #216	@ 0xd8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_ConfigChannel+0x22>
 8001276:	2302      	movs	r3, #2
 8001278:	e3c9      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x7b6>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe6f 	bl	8000f6a <LL_ADC_REG_IsConversionOngoing>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 83aa 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d824      	bhi.n	80012ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	3b02      	subs	r3, #2
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d81b      	bhi.n	80012e6 <HAL_ADC_ConfigChannel+0x8e>
 80012ae:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <HAL_ADC_ConfigChannel+0x5c>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80012c4:	230c      	movs	r3, #12
 80012c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012ca:	e010      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80012cc:	2312      	movs	r3, #18
 80012ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012d2:	e00c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80012d4:	2318      	movs	r3, #24
 80012d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012da:	e008      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012e4:	e003      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80012e6:	2306      	movs	r3, #6
 80012e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80012fc:	f7ff fd59 	bl	8000db2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe30 	bl	8000f6a <LL_ADC_REG_IsConversionOngoing>
 800130a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe3c 	bl	8000f90 <LL_ADC_INJ_IsConversionOngoing>
 8001318:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 81a4 	bne.w	800166e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 819f 	bne.w	800166e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	461a      	mov	r2, r3
 800133e:	f7ff fd64 	bl	8000e0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00a      	beq.n	800137a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6919      	ldr	r1, [r3, #16]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001374:	f7ff fcc8 	bl	8000d08 <LL_ADC_SetOffset>
 8001378:	e179      	b.n	800166e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fce5 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10a      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x14e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fcda 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	0e9b      	lsrs	r3, r3, #26
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	e01e      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x18c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fccf 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80013d4:	2320      	movs	r3, #32
 80013d6:	e004      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80013d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1a4>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0e9b      	lsrs	r3, r3, #26
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	e018      	b.n	800142e <HAL_ADC_ConfigChannel+0x1d6>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001420:	2320      	movs	r3, #32
 8001422:	e004      	b.n	800142e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800142e:	429a      	cmp	r2, r3
 8001430:	d106      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc9e 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc82 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10a      	bne.n	800146c <HAL_ADC_ConfigChannel+0x214>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fc77 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	0e9b      	lsrs	r3, r3, #26
 8001466:	f003 021f 	and.w	r2, r3, #31
 800146a:	e01e      	b.n	80014aa <HAL_ADC_ConfigChannel+0x252>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc6c 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800148a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800148e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800149a:	2320      	movs	r3, #32
 800149c:	e004      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800149e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x26a>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	e018      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x29c>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80014d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80014de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80014e6:	2320      	movs	r3, #32
 80014e8:	e004      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80014ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fc3b 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2102      	movs	r1, #2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc1f 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10a      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x2da>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc14 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	e01e      	b.n	8001570 <HAL_ADC_ConfigChannel+0x318>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc09 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001560:	2320      	movs	r3, #32
 8001562:	e004      	b.n	800156e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x330>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	e014      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x35a>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800159c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80015a4:	2320      	movs	r3, #32
 80015a6:	e004      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80015a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d106      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fbdc 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2103      	movs	r1, #3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fbc0 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x398>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2103      	movs	r1, #3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbb5 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 021f 	and.w	r2, r3, #31
 80015ee:	e017      	b.n	8001620 <HAL_ADC_ConfigChannel+0x3c8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2103      	movs	r1, #3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fbaa 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800160a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800160c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001612:	2320      	movs	r3, #32
 8001614:	e003      	b.n	800161e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x3e0>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0e9b      	lsrs	r3, r3, #26
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	e011      	b.n	800165c <HAL_ADC_ConfigChannel+0x404>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001648:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800164a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001650:	2320      	movs	r3, #32
 8001652:	e003      	b.n	800165c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	2103      	movs	r1, #3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fb87 	bl	8000d7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fc66 	bl	8000f44 <LL_ADC_IsEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8140 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	461a      	mov	r2, r3
 800168e:	f7ff fbe7 	bl	8000e60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4a8f      	ldr	r2, [pc, #572]	@ (80018d4 <HAL_ADC_ConfigChannel+0x67c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	f040 8131 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10b      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x46e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	0e9b      	lsrs	r3, r3, #26
 80016b4:	3301      	adds	r3, #1
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2b09      	cmp	r3, #9
 80016bc:	bf94      	ite	ls
 80016be:	2301      	movls	r3, #1
 80016c0:	2300      	movhi	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	e019      	b.n	80016fa <HAL_ADC_ConfigChannel+0x4a2>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80016d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80016d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80016de:	2320      	movs	r3, #32
 80016e0:	e003      	b.n	80016ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80016e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d079      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_ADC_ConfigChannel+0x4c2>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	3301      	adds	r3, #1
 8001712:	069b      	lsls	r3, r3, #26
 8001714:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001718:	e015      	b.n	8001746 <HAL_ADC_ConfigChannel+0x4ee>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800172a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800172c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e003      	b.n	800173e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	069b      	lsls	r3, r3, #26
 8001742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x50e>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0e9b      	lsrs	r3, r3, #26
 8001758:	3301      	adds	r3, #1
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	e017      	b.n	8001796 <HAL_ADC_ConfigChannel+0x53e>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800177e:	2320      	movs	r3, #32
 8001780:	e003      	b.n	800178a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2101      	movs	r1, #1
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	ea42 0103 	orr.w	r1, r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x564>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	3301      	adds	r3, #1
 80017ae:	f003 021f 	and.w	r2, r3, #31
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	051b      	lsls	r3, r3, #20
 80017ba:	e018      	b.n	80017ee <HAL_ADC_ConfigChannel+0x596>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80017ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80017ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e003      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80017d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	f003 021f 	and.w	r2, r3, #31
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017ee:	430b      	orrs	r3, r1
 80017f0:	e081      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <HAL_ADC_ConfigChannel+0x5b6>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	3301      	adds	r3, #1
 8001806:	069b      	lsls	r3, r3, #26
 8001808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800180c:	e015      	b.n	800183a <HAL_ADC_ConfigChannel+0x5e2>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e003      	b.n	8001832 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3301      	adds	r3, #1
 8001834:	069b      	lsls	r3, r3, #26
 8001836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ADC_ConfigChannel+0x602>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0e9b      	lsrs	r3, r3, #26
 800184c:	3301      	adds	r3, #1
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	e017      	b.n	800188a <HAL_ADC_ConfigChannel+0x632>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	61bb      	str	r3, [r7, #24]
  return result;
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001872:	2320      	movs	r3, #32
 8001874:	e003      	b.n	800187e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	3301      	adds	r3, #1
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	ea42 0103 	orr.w	r1, r2, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x65e>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0e9b      	lsrs	r3, r3, #26
 80018a0:	3301      	adds	r3, #1
 80018a2:	f003 021f 	and.w	r2, r3, #31
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	051b      	lsls	r3, r3, #20
 80018b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	e01e      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x69c>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	60fb      	str	r3, [r7, #12]
  return result;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e006      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x688>
 80018d2:	bf00      	nop
 80018d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f003 021f 	and.w	r2, r3, #31
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	051b      	lsls	r3, r3, #20
 80018f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff fa85 	bl	8000e0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d07a      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800190c:	4843      	ldr	r0, [pc, #268]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7c4>)
 800190e:	f7ff f9ed 	bl	8000cec <LL_ADC_GetCommonPathInternalCh>
 8001912:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a41      	ldr	r2, [pc, #260]	@ (8001a20 <HAL_ADC_ConfigChannel+0x7c8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d12c      	bne.n	800197a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d126      	bne.n	800197a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_ADC_ConfigChannel+0x6e8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a28 <HAL_ADC_ConfigChannel+0x7d0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d15d      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001944:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001948:	4619      	mov	r1, r3
 800194a:	4834      	ldr	r0, [pc, #208]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7c4>)
 800194c:	f7ff f9bb 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001950:	4b36      	ldr	r3, [pc, #216]	@ (8001a2c <HAL_ADC_ConfigChannel+0x7d4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	4a36      	ldr	r2, [pc, #216]	@ (8001a30 <HAL_ADC_ConfigChannel+0x7d8>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800196a:	e002      	b.n	8001972 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3b01      	subs	r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001978:	e040      	b.n	80019fc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d118      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d112      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x74c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <HAL_ADC_ConfigChannel+0x7d0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d12d      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	4619      	mov	r1, r3
 80019ae:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7c4>)
 80019b0:	f7ff f989 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019b4:	e024      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_ADC_ConfigChannel+0x7e0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d120      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11a      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <HAL_ADC_ConfigChannel+0x7cc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d115      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019de:	4619      	mov	r1, r3
 80019e0:	480e      	ldr	r0, [pc, #56]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7c4>)
 80019e2:	f7ff f970 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
 80019e6:	e00c      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80019fa:	e002      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	37d8      	adds	r7, #216	@ 0xd8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	80080000 	.word	0x80080000
 8001a1c:	50040300 	.word	0x50040300
 8001a20:	c7520000 	.word	0xc7520000
 8001a24:	50040000 	.word	0x50040000
 8001a28:	50040200 	.word	0x50040200
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	053e2d63 	.word	0x053e2d63
 8001a34:	cb840000 	.word	0xcb840000
 8001a38:	80000001 	.word	0x80000001

08001a3c <LL_ADC_IsEnabled>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_IsEnabled+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_IsEnabled+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_IsConversionOngoing>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b09f      	sub	sp, #124	@ 0x7c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e093      	b.n	8001bce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a47      	ldr	r2, [pc, #284]	@ (8001bd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ac0:	4b46      	ldr	r3, [pc, #280]	@ (8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	e001      	b.n	8001aca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e072      	b.n	8001bce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffb9 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffb3 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d154      	bne.n	8001bac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d151      	bne.n	8001bac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b08:	4b35      	ldr	r3, [pc, #212]	@ (8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d02c      	beq.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b26:	035b      	lsls	r3, r3, #13
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b30:	4829      	ldr	r0, [pc, #164]	@ (8001bd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b32:	f7ff ff83 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b36:	4604      	mov	r4, r0
 8001b38:	4828      	ldr	r0, [pc, #160]	@ (8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b3a:	f7ff ff7f 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	431c      	orrs	r4, r3
 8001b42:	4828      	ldr	r0, [pc, #160]	@ (8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b44:	f7ff ff7a 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4323      	orrs	r3, r4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d137      	bne.n	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b58:	f023 030f 	bic.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6811      	ldr	r1, [r2, #0]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	6892      	ldr	r2, [r2, #8]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b6c:	e028      	b.n	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b7a:	4817      	ldr	r0, [pc, #92]	@ (8001bd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b7c:	f7ff ff5e 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b80:	4604      	mov	r4, r0
 8001b82:	4816      	ldr	r0, [pc, #88]	@ (8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b84:	f7ff ff5a 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	431c      	orrs	r4, r3
 8001b8c:	4815      	ldr	r0, [pc, #84]	@ (8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b8e:	f7ff ff55 	bl	8001a3c <LL_ADC_IsEnabled>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4323      	orrs	r3, r4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d112      	bne.n	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ba2:	f023 030f 	bic.w	r3, r3, #15
 8001ba6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ba8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001baa:	e009      	b.n	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	f043 0220 	orr.w	r2, r3, #32
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001bc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	377c      	adds	r7, #124	@ 0x7c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	50040000 	.word	0x50040000
 8001bdc:	50040100 	.word	0x50040100
 8001be0:	50040300 	.word	0x50040300
 8001be4:	50040200 	.word	0x50040200

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff47 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff5c 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffb0 	bl	8001d08 <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e014      	b.n	8001dee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	791b      	ldrb	r3, [r3, #4]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fdc5 	bl	8000964 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b088      	sub	sp, #32
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	795b      	ldrb	r3, [r3, #5]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_DAC_ConfigChannel+0x1c>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e114      	b.n	800203c <HAL_DAC_ConfigChannel+0x246>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	f040 8081 	bne.w	8001f2a <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001e28:	f7fe ff0a 	bl	8000c40 <HAL_GetTick>
 8001e2c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d140      	bne.n	8001eb6 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e34:	e018      	b.n	8001e68 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e36:	f7fe ff03 	bl	8000c40 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d911      	bls.n	8001e68 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f043 0208 	orr.w	r2, r3, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2203      	movs	r2, #3
 8001e62:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0e9      	b.n	800203c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1df      	bne.n	8001e36 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7fe feee 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	6992      	ldr	r2, [r2, #24]
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e86:	e023      	b.n	8001ed0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e88:	f7fe feda 	bl	8000c40 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d90f      	bls.n	8001eb6 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da0a      	bge.n	8001eb6 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f043 0208 	orr.w	r2, r3, #8
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0c2      	b.n	800203c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	dbe3      	blt.n	8001e88 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7fe fec9 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	ea02 0103 	and.w	r1, r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	21ff      	movs	r1, #255	@ 0xff
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	ea02 0103 	and.w	r1, r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d11d      	bne.n	8001f6e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f38:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	221f      	movs	r2, #31
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6819      	ldr	r1, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	22c0      	movs	r2, #192	@ 0xc0
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43da      	mvns	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	e17f      	b.n	8002354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8171 	beq.w	800234e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d005      	beq.n	8002084 <HAL_GPIO_Init+0x40>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d130      	bne.n	80020e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ba:	2201      	movs	r2, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0201 	and.w	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d118      	bne.n	8002124 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020f8:	2201      	movs	r2, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f003 0201 	and.w	r2, r3, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b03      	cmp	r3, #3
 800212e:	d017      	beq.n	8002160 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d123      	bne.n	80021b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	6939      	ldr	r1, [r7, #16]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80ac 	beq.w	800234e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002374 <HAL_GPIO_Init+0x330>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002374 <HAL_GPIO_Init+0x330>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6613      	str	r3, [r2, #96]	@ 0x60
 8002202:	4b5c      	ldr	r3, [pc, #368]	@ (8002374 <HAL_GPIO_Init+0x330>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800220e:	4a5a      	ldr	r2, [pc, #360]	@ (8002378 <HAL_GPIO_Init+0x334>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x242>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4f      	ldr	r2, [pc, #316]	@ (800237c <HAL_GPIO_Init+0x338>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x23e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4e      	ldr	r2, [pc, #312]	@ (8002380 <HAL_GPIO_Init+0x33c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x23a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4d      	ldr	r2, [pc, #308]	@ (8002384 <HAL_GPIO_Init+0x340>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x236>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4c      	ldr	r2, [pc, #304]	@ (8002388 <HAL_GPIO_Init+0x344>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x232>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4b      	ldr	r2, [pc, #300]	@ (800238c <HAL_GPIO_Init+0x348>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4a      	ldr	r2, [pc, #296]	@ (8002390 <HAL_GPIO_Init+0x34c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x22a>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x244>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x244>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x244>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x244>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x244>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x244>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x244>
 8002286:	2300      	movs	r3, #0
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002298:	4937      	ldr	r1, [pc, #220]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <HAL_GPIO_Init+0x350>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ca:	4a32      	ldr	r2, [pc, #200]	@ (8002394 <HAL_GPIO_Init+0x350>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022d0:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <HAL_GPIO_Init+0x350>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f4:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_GPIO_Init+0x350>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022fa:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <HAL_GPIO_Init+0x350>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800231e:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <HAL_GPIO_Init+0x350>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_GPIO_Init+0x350>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002348:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <HAL_GPIO_Init+0x350>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	f47f ae78 	bne.w	8002054 <HAL_GPIO_Init+0x10>
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	48000c00 	.word	0x48000c00
 8002388:	48001000 	.word	0x48001000
 800238c:	48001400 	.word	0x48001400
 8002390:	48001800 	.word	0x48001800
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000

080023b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c2:	d130      	bne.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c4:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d0:	d038      	beq.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023da:	4a1e      	ldr	r2, [pc, #120]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2232      	movs	r2, #50	@ 0x32
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	4a1b      	ldr	r2, [pc, #108]	@ (800245c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9b      	lsrs	r3, r3, #18
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f8:	e002      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240c:	d102      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f2      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002420:	d110      	bne.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e00f      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002432:	d007      	beq.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800243c:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40007000 	.word	0x40007000
 8002458:	20000000 	.word	0x20000000
 800245c:	431bde83 	.word	0x431bde83

08002460 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e3ca      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b97      	ldr	r3, [pc, #604]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b94      	ldr	r3, [pc, #592]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80e4 	beq.w	800265c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_RCC_OscConfig+0x4a>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	f040 808b 	bne.w	80025b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 8087 	bne.w	80025b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024aa:	4b89      	ldr	r3, [pc, #548]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x62>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e3a2      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_RCC_OscConfig+0x7c>
 80024d2:	4b7f      	ldr	r3, [pc, #508]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024da:	e005      	b.n	80024e8 <HAL_RCC_OscConfig+0x88>
 80024dc:	4b7c      	ldr	r3, [pc, #496]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d223      	bcs.n	8002534 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fd89 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e383      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002500:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a72      	ldr	r2, [pc, #456]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b70      	ldr	r3, [pc, #448]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	496d      	ldr	r1, [pc, #436]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251e:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	4968      	ldr	r1, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e025      	b.n	8002580 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002534:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4960      	ldr	r1, [pc, #384]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002552:	4b5f      	ldr	r3, [pc, #380]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	495b      	ldr	r1, [pc, #364]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fd49 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e343      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002580:	f000 fc7e 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b52      	ldr	r3, [pc, #328]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	4950      	ldr	r1, [pc, #320]	@ (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	4a4e      	ldr	r2, [pc, #312]	@ (80026d8 <HAL_RCC_OscConfig+0x278>)
 800259e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025a0:	4b4e      	ldr	r3, [pc, #312]	@ (80026dc <HAL_RCC_OscConfig+0x27c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fafb 	bl	8000ba0 <HAL_InitTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d052      	beq.n	800265a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	e327      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d032      	beq.n	8002626 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025c0:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a42      	ldr	r2, [pc, #264]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fb38 	bl	8000c40 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d4:	f7fe fb34 	bl	8000c40 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e310      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e6:	4b3a      	ldr	r3, [pc, #232]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f2:	4b37      	ldr	r3, [pc, #220]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b34      	ldr	r3, [pc, #208]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4931      	ldr	r1, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002610:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	492c      	ldr	r1, [pc, #176]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e01a      	b.n	800265c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002626:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002632:	f7fe fb05 	bl	8000c40 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263a:	f7fe fb01 	bl	8000c40 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e2dd      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x1da>
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d074      	beq.n	8002752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b08      	cmp	r3, #8
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x21a>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d10e      	bne.n	8002692 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d10b      	bne.n	8002692 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d064      	beq.n	8002750 <HAL_RCC_OscConfig+0x2f0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d160      	bne.n	8002750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e2ba      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x24a>
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e026      	b.n	80026f8 <HAL_RCC_OscConfig+0x298>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b2:	d115      	bne.n	80026e0 <HAL_RCC_OscConfig+0x280>
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80026ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a02      	ldr	r2, [pc, #8]	@ (80026d0 <HAL_RCC_OscConfig+0x270>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x298>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	080044f4 	.word	0x080044f4
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004
 80026e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a9f      	ldr	r2, [pc, #636]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b9d      	ldr	r3, [pc, #628]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a9c      	ldr	r2, [pc, #624]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fa9e 	bl	8000c40 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fa9a 	bl	8000c40 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e276      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271a:	4b92      	ldr	r3, [pc, #584]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x2a8>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fa8a 	bl	8000c40 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fa86 	bl	8000c40 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e262      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002742:	4b88      	ldr	r3, [pc, #544]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x2d0>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d060      	beq.n	8002820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x310>
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d119      	bne.n	800279e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d116      	bne.n	800279e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002770:	4b7c      	ldr	r3, [pc, #496]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_OscConfig+0x328>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e23f      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b76      	ldr	r3, [pc, #472]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	4973      	ldr	r1, [pc, #460]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279c:	e040      	b.n	8002820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d023      	beq.n	80027ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fa45 	bl	8000c40 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fa41 	bl	8000c40 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e21d      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027cc:	4b65      	ldr	r3, [pc, #404]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b62      	ldr	r3, [pc, #392]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	495f      	ldr	r1, [pc, #380]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e018      	b.n	8002820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80027f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fa21 	bl	8000c40 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fa1d 	bl	8000c40 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1f9      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01c      	beq.n	800286e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002834:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	4a4a      	ldr	r2, [pc, #296]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe f9fc 	bl	8000c40 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe f9f8 	bl	8000c40 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1d4      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ef      	beq.n	800284c <HAL_RCC_OscConfig+0x3ec>
 800286c:	e01b      	b.n	80028a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002874:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe f9df 	bl	8000c40 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002886:	f7fe f9db 	bl	8000c40 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1b7      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002898:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ef      	bne.n	8002886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80a6 	beq.w	8002a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	4a26      	ldr	r2, [pc, #152]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d0:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e0:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <HAL_RCC_OscConfig+0x508>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d118      	bne.n	800291e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <HAL_RCC_OscConfig+0x508>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <HAL_RCC_OscConfig+0x508>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f8:	f7fe f9a2 	bl	8000c40 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe f99e 	bl	8000c40 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e17a      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_RCC_OscConfig+0x508>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x4d8>
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002936:	e029      	b.n	800298c <HAL_RCC_OscConfig+0x52c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d115      	bne.n	800296c <HAL_RCC_OscConfig+0x50c>
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <HAL_RCC_OscConfig+0x504>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x52c>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	4b9c      	ldr	r3, [pc, #624]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	4a9b      	ldr	r2, [pc, #620]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800297c:	4b98      	ldr	r3, [pc, #608]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	4a97      	ldr	r2, [pc, #604]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d016      	beq.n	80029c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe f954 	bl	8000c40 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe f950 	bl	8000c40 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e12a      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ed      	beq.n	800299c <HAL_RCC_OscConfig+0x53c>
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe f93d 	bl	8000c40 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe f939 	bl	8000c40 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e113      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e0:	4b7f      	ldr	r3, [pc, #508]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ed      	bne.n	80029ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	4a79      	ldr	r2, [pc, #484]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80fe 	beq.w	8002c06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	f040 80d0 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a14:	4b72      	ldr	r3, [pc, #456]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d130      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	3b01      	subs	r3, #1
 8002a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d127      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11f      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a54:	2a07      	cmp	r2, #7
 8002a56:	bf14      	ite	ne
 8002a58:	2201      	movne	r2, #1
 8002a5a:	2200      	moveq	r2, #0
 8002a5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d113      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d06e      	beq.n	8002b68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d069      	beq.n	8002b64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a90:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a9c:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0ad      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aac:	4b4c      	ldr	r3, [pc, #304]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab8:	f7fe f8c2 	bl	8000c40 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f8be 	bl	8000c40 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e09a      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad2:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	4b40      	ldr	r3, [pc, #256]	@ (8002be4 <HAL_RCC_OscConfig+0x784>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aee:	3a01      	subs	r2, #1
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002af8:	0212      	lsls	r2, r2, #8
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b00:	0852      	lsrs	r2, r2, #1
 8002b02:	3a01      	subs	r2, #1
 8002b04:	0552      	lsls	r2, r2, #21
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b0c:	0852      	lsrs	r2, r2, #1
 8002b0e:	3a01      	subs	r2, #1
 8002b10:	0652      	lsls	r2, r2, #25
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b18:	0912      	lsrs	r2, r2, #4
 8002b1a:	0452      	lsls	r2, r2, #17
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	4930      	ldr	r1, [pc, #192]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b24:	4b2e      	ldr	r3, [pc, #184]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2d      	ldr	r2, [pc, #180]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a2a      	ldr	r2, [pc, #168]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7fe f880 	bl	8000c40 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe f87c 	bl	8000c40 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e058      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b62:	e050      	b.n	8002c06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e04f      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d148      	bne.n	8002c06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b80:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8c:	f7fe f858 	bl	8000c40 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe f854 	bl	8000c40 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e030      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x734>
 8002bb2:	e028      	b.n	8002c06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d023      	beq.n	8002c02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a08      	ldr	r2, [pc, #32]	@ (8002be0 <HAL_RCC_OscConfig+0x780>)
 8002bc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f83b 	bl	8000c40 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	e00c      	b.n	8002be8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe f837 	bl	8000c40 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d905      	bls.n	8002be8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e013      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
 8002be0:	40021000 	.word	0x40021000
 8002be4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_OscConfig+0x7b0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ec      	bne.n	8002bce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_OscConfig+0x7b0>)
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4905      	ldr	r1, [pc, #20]	@ (8002c10 <HAL_RCC_OscConfig+0x7b0>)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x7b4>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
 8002c00:	e001      	b.n	8002c06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	feeefffc 	.word	0xfeeefffc

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0e7      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b75      	ldr	r3, [pc, #468]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b72      	ldr	r3, [pc, #456]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4970      	ldr	r1, [pc, #448]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0cf      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4960      	ldr	r1, [pc, #384]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04c      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d121      	bne.n	8002cee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0a6      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	4b54      	ldr	r3, [pc, #336]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e09a      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cce:	4b4e      	ldr	r3, [pc, #312]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e08e      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cde:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e086      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b46      	ldr	r3, [pc, #280]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4943      	ldr	r1, [pc, #268]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d00:	f7fd ff9e 	bl	8000c40 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fd ff9a 	bl	8000c40 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e06e      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b31      	ldr	r3, [pc, #196]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d208      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	492b      	ldr	r1, [pc, #172]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5e:	4b29      	ldr	r3, [pc, #164]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d210      	bcs.n	8002d8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 0207 	bic.w	r2, r3, #7
 8002d74:	4923      	ldr	r1, [pc, #140]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7c:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e036      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4918      	ldr	r1, [pc, #96]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db8:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4910      	ldr	r1, [pc, #64]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dcc:	f000 f858 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	490b      	ldr	r1, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x1f4>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	4a09      	ldr	r2, [pc, #36]	@ (8002e10 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x1fc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fed5 	bl	8000ba0 <HAL_InitTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40022000 	.word	0x40022000
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	080044f4 	.word	0x080044f4
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_RCC_MCOConfig+0x64>)
 8002e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_RCC_MCOConfig+0x64>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_RCC_MCOConfig+0x64>)
 8002e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e46:	2302      	movs	r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e5c:	f7ff f8f2 	bl	8002044 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_MCOConfig+0x64>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <HAL_RCC_MCOConfig+0x64>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	@ 0x24
 8002e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e98:	4b3b      	ldr	r3, [pc, #236]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d11e      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb4:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec0:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e005      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002edc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e004      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f04:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d134      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0xac>
 8002f24:	e005      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f28:	617b      	str	r3, [r7, #20]
      break;
 8002f2a:	e005      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f2e:	617b      	str	r3, [r7, #20]
      break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	617b      	str	r3, [r7, #20]
      break;
 8002f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	0e5b      	lsrs	r3, r3, #25
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f78:	69bb      	ldr	r3, [r7, #24]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	0800450c 	.word	0x0800450c
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08004504 	.word	0x08004504

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe0:	f7ff ffda 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	08004504 	.word	0x08004504

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003014:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003020:	f7ff f9ba 	bl	8002398 <HAL_PWREx_GetVoltageRange>
 8003024:	6178      	str	r0, [r7, #20]
 8003026:	e014      	b.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	@ 0x58
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003040:	f7ff f9aa 	bl	8002398 <HAL_PWREx_GetVoltageRange>
 8003044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	4a1d      	ldr	r2, [pc, #116]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003058:	d10b      	bne.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b80      	cmp	r3, #128	@ 0x80
 800305e:	d919      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2ba0      	cmp	r3, #160	@ 0xa0
 8003064:	d902      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003066:	2302      	movs	r3, #2
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e013      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e010      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b80      	cmp	r3, #128	@ 0x80
 8003076:	d902      	bls.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003078:	2303      	movs	r3, #3
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e00a      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	d102      	bne.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003084:	2302      	movs	r3, #2
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e004      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b70      	cmp	r3, #112	@ 0x70
 800308e:	d101      	bne.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	4909      	ldr	r1, [pc, #36]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030a4:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d041      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030ec:	d02a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030f2:	d824      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030fe:	d81e      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003108:	d010      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800310a:	e018      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800310c:	4b86      	ldr	r3, [pc, #536]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a85      	ldr	r2, [pc, #532]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003118:	e015      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fabb 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312a:	e00c      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3320      	adds	r3, #32
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fba6 	bl	8003884 <RCCEx_PLLSAI2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	74fb      	strb	r3, [r7, #19]
      break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314c:	4b76      	ldr	r3, [pc, #472]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315a:	4973      	ldr	r1, [pc, #460]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003162:	e001      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d041      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003178:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800317c:	d02a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800317e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003182:	d824      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800318a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800318e:	d81e      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003198:	d010      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800319a:	e018      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319c:	4b62      	ldr	r3, [pc, #392]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a61      	ldr	r2, [pc, #388]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fa73 	bl	800369c <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ba:	e00c      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb5e 	bl	8003884 <RCCEx_PLLSAI2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	74fb      	strb	r3, [r7, #19]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031dc:	4b52      	ldr	r3, [pc, #328]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ea:	494f      	ldr	r1, [pc, #316]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	4a40      	ldr	r2, [pc, #256]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	@ 0x58
 800322c:	4b3e      	ldr	r3, [pc, #248]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323c:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3a      	ldr	r2, [pc, #232]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003248:	f7fd fcfa 	bl	8000c40 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fd fcf6 	bl	8000c40 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	74fb      	strb	r3, [r7, #19]
        break;
 8003262:	e005      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003264:	4b31      	ldr	r3, [pc, #196]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d15c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d019      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a0:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	4a20      	ldr	r2, [pc, #128]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c0:	4a19      	ldr	r2, [pc, #100]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fd fcb5 	bl	8000c40 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	e00b      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fcb1 	bl	8000c40 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d902      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	74fb      	strb	r3, [r7, #19]
            break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ec      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003306:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003316:	4904      	ldr	r1, [pc, #16]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b9e      	ldr	r3, [pc, #632]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	4a9d      	ldr	r2, [pc, #628]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4b98      	ldr	r3, [pc, #608]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f023 0203 	bic.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	4994      	ldr	r1, [pc, #592]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003374:	4b8f      	ldr	r3, [pc, #572]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f023 020c 	bic.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003382:	498c      	ldr	r1, [pc, #560]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003396:	4b87      	ldr	r3, [pc, #540]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4983      	ldr	r1, [pc, #524]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b8:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	497b      	ldr	r1, [pc, #492]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e8:	4972      	ldr	r1, [pc, #456]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b6d      	ldr	r3, [pc, #436]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	496a      	ldr	r1, [pc, #424]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b65      	ldr	r3, [pc, #404]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	4961      	ldr	r1, [pc, #388]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003440:	4b5c      	ldr	r3, [pc, #368]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	4959      	ldr	r1, [pc, #356]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b54      	ldr	r3, [pc, #336]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003470:	4950      	ldr	r1, [pc, #320]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003484:	4b4b      	ldr	r3, [pc, #300]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	4948      	ldr	r1, [pc, #288]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a6:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	493f      	ldr	r1, [pc, #252]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d028      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	4b3a      	ldr	r3, [pc, #232]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d6:	4937      	ldr	r1, [pc, #220]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b32      	ldr	r3, [pc, #200]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a31      	ldr	r2, [pc, #196]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e011      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034fe:	d10c      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f8c8 	bl	800369c <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003526:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003534:	491f      	ldr	r1, [pc, #124]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003544:	d106      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f899 	bl	800369c <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003592:	4908      	ldr	r1, [pc, #32]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035a2:	d109      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a02      	ldr	r2, [pc, #8]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ae:	60d3      	str	r3, [r2, #12]
 80035b0:	e014      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f867 	bl	800369c <RCCEx_PLLSAI1_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f6:	4928      	ldr	r1, [pc, #160]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2102      	movs	r1, #2
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f844 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
 8003622:	e011      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3320      	adds	r3, #32
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f925 	bl	8003884 <RCCEx_PLLSAI2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003654:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003662:	490d      	ldr	r1, [pc, #52]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003686:	4904      	ldr	r1, [pc, #16]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800368e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036aa:	4b75      	ldr	r3, [pc, #468]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b6:	4b72      	ldr	r3, [pc, #456]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0203 	and.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10d      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
       ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d047      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e044      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d018      	beq.n	8003722 <RCCEx_PLLSAI1_Config+0x86>
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d825      	bhi.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x62>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d009      	beq.n	8003710 <RCCEx_PLLSAI1_Config+0x74>
 80036fc:	e020      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fe:	4b60      	ldr	r3, [pc, #384]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e01a      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003710:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e013      	b.n	800374a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372e:	4b54      	ldr	r3, [pc, #336]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373e:	e006      	b.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e004      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	430b      	orrs	r3, r1
 800376c:	4944      	ldr	r1, [pc, #272]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d17d      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003778:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a40      	ldr	r2, [pc, #256]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd fa5c 	bl	8000c40 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378c:	f7fd fa58 	bl	8000c40 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
        break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d160      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	0912      	lsrs	r2, r2, #4
 80037d0:	0452      	lsls	r2, r2, #17
 80037d2:	430a      	orrs	r2, r1
 80037d4:	492a      	ldr	r1, [pc, #168]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	610b      	str	r3, [r1, #16]
 80037da:	e027      	b.n	800382c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d112      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e2:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	0211      	lsls	r1, r2, #8
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6912      	ldr	r2, [r2, #16]
 80037f8:	0852      	lsrs	r2, r2, #1
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0552      	lsls	r2, r2, #21
 80037fe:	430a      	orrs	r2, r1
 8003800:	491f      	ldr	r1, [pc, #124]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e011      	b.n	800382c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6952      	ldr	r2, [r2, #20]
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fa02 	bl	8000c40 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003840:	f7fd f9fe 	bl	8000c40 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003892:	4b6a      	ldr	r3, [pc, #424]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
       ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038b6:	4b61      	ldr	r3, [pc, #388]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
       ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d047      	beq.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e044      	b.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d018      	beq.n	800390a <RCCEx_PLLSAI2_Config+0x86>
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d825      	bhi.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0x62>
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d009      	beq.n	80038f8 <RCCEx_PLLSAI2_Config+0x74>
 80038e4:	e020      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e6:	4b55      	ldr	r3, [pc, #340]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f6:	e01a      	b.n	800392e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f8:	4b50      	ldr	r3, [pc, #320]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003908:	e013      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003916:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003926:	e006      	b.n	8003936 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e004      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003936:	bf00      	nop
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800393e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	430b      	orrs	r3, r1
 8003954:	4939      	ldr	r1, [pc, #228]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d167      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003960:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd f968 	bl	8000c40 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003974:	f7fd f964 	bl	8000c40 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003988:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ef      	bne.n	8003974 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d14a      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a0:	4b26      	ldr	r3, [pc, #152]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	0912      	lsrs	r2, r2, #4
 80039b8:	0452      	lsls	r2, r2, #17
 80039ba:	430a      	orrs	r2, r1
 80039bc:	491f      	ldr	r1, [pc, #124]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	614b      	str	r3, [r1, #20]
 80039c2:	e011      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	0211      	lsls	r1, r2, #8
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6912      	ldr	r2, [r2, #16]
 80039da:	0852      	lsrs	r2, r2, #1
 80039dc:	3a01      	subs	r2, #1
 80039de:	0652      	lsls	r2, r2, #25
 80039e0:	430a      	orrs	r2, r1
 80039e2:	4916      	ldr	r1, [pc, #88]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039e8:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a13      	ldr	r2, [pc, #76]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd f924 	bl	8000c40 <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fc:	f7fd f920 	bl	8000c40 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0e:	e005      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ef      	beq.n	80039fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e040      	b.n	8003ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fc ffbc 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fae0 	bl	800404c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f825 	bl	8003adc <UART_SetConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e01b      	b.n	8003ad4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb5f 	bl	8004190 <UART_CheckIdleState>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b08a      	sub	sp, #40	@ 0x28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4ba4      	ldr	r3, [pc, #656]	@ (8003d9c <UART_SetConfig+0x2c0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a99      	ldr	r2, [pc, #612]	@ (8003da0 <UART_SetConfig+0x2c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	4313      	orrs	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a90      	ldr	r2, [pc, #576]	@ (8003da4 <UART_SetConfig+0x2c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d126      	bne.n	8003bb4 <UART_SetConfig+0xd8>
 8003b66:	4b90      	ldr	r3, [pc, #576]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d81b      	bhi.n	8003bac <UART_SetConfig+0xd0>
 8003b74:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <UART_SetConfig+0xa0>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba5 	.word	0x08003ba5
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e116      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003b94:	2302      	movs	r3, #2
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e112      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e10e      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e10a      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003bac:	2310      	movs	r3, #16
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e106      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7c      	ldr	r2, [pc, #496]	@ (8003dac <UART_SetConfig+0x2d0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d138      	bne.n	8003c30 <UART_SetConfig+0x154>
 8003bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d82d      	bhi.n	8003c28 <UART_SetConfig+0x14c>
 8003bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <UART_SetConfig+0xf8>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c29 	.word	0x08003c29
 8003bdc:	08003c29 	.word	0x08003c29
 8003be0:	08003c29 	.word	0x08003c29
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c29 	.word	0x08003c29
 8003bec:	08003c29 	.word	0x08003c29
 8003bf0:	08003c29 	.word	0x08003c29
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	08003c29 	.word	0x08003c29
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e0d8      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e0d4      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e0d0      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c20:	2308      	movs	r3, #8
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e0cc      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e0c8      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5e      	ldr	r2, [pc, #376]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d125      	bne.n	8003c86 <UART_SetConfig+0x1aa>
 8003c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c44:	2b30      	cmp	r3, #48	@ 0x30
 8003c46:	d016      	beq.n	8003c76 <UART_SetConfig+0x19a>
 8003c48:	2b30      	cmp	r3, #48	@ 0x30
 8003c4a:	d818      	bhi.n	8003c7e <UART_SetConfig+0x1a2>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d00a      	beq.n	8003c66 <UART_SetConfig+0x18a>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d814      	bhi.n	8003c7e <UART_SetConfig+0x1a2>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <UART_SetConfig+0x182>
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d008      	beq.n	8003c6e <UART_SetConfig+0x192>
 8003c5c:	e00f      	b.n	8003c7e <UART_SetConfig+0x1a2>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c64:	e0ad      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c66:	2302      	movs	r3, #2
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6c:	e0a9      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c6e:	2304      	movs	r3, #4
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c74:	e0a5      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c76:	2308      	movs	r3, #8
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	e0a1      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c7e:	2310      	movs	r3, #16
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c84:	e09d      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003db4 <UART_SetConfig+0x2d8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d125      	bne.n	8003cdc <UART_SetConfig+0x200>
 8003c90:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c9c:	d016      	beq.n	8003ccc <UART_SetConfig+0x1f0>
 8003c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca0:	d818      	bhi.n	8003cd4 <UART_SetConfig+0x1f8>
 8003ca2:	2b80      	cmp	r3, #128	@ 0x80
 8003ca4:	d00a      	beq.n	8003cbc <UART_SetConfig+0x1e0>
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d814      	bhi.n	8003cd4 <UART_SetConfig+0x1f8>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <UART_SetConfig+0x1d8>
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d008      	beq.n	8003cc4 <UART_SetConfig+0x1e8>
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x1f8>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e082      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e07e      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e07a      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e076      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e072      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a35      	ldr	r2, [pc, #212]	@ (8003db8 <UART_SetConfig+0x2dc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12a      	bne.n	8003d3c <UART_SetConfig+0x260>
 8003ce6:	4b30      	ldr	r3, [pc, #192]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf4:	d01a      	beq.n	8003d2c <UART_SetConfig+0x250>
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfa:	d81b      	bhi.n	8003d34 <UART_SetConfig+0x258>
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d00:	d00c      	beq.n	8003d1c <UART_SetConfig+0x240>
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d06:	d815      	bhi.n	8003d34 <UART_SetConfig+0x258>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <UART_SetConfig+0x238>
 8003d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d10:	d008      	beq.n	8003d24 <UART_SetConfig+0x248>
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x258>
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e052      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e04e      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e04a      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e046      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e042      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <UART_SetConfig+0x2c4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d13a      	bne.n	8003dbc <UART_SetConfig+0x2e0>
 8003d46:	4b18      	ldr	r3, [pc, #96]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d54:	d01a      	beq.n	8003d8c <UART_SetConfig+0x2b0>
 8003d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0x2b8>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d60:	d00c      	beq.n	8003d7c <UART_SetConfig+0x2a0>
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d66:	d815      	bhi.n	8003d94 <UART_SetConfig+0x2b8>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <UART_SetConfig+0x298>
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d70:	d008      	beq.n	8003d84 <UART_SetConfig+0x2a8>
 8003d72:	e00f      	b.n	8003d94 <UART_SetConfig+0x2b8>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e022      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e01e      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e01a      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e016      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e012      	b.n	8003dc2 <UART_SetConfig+0x2e6>
 8003d9c:	efff69f3 	.word	0xefff69f3
 8003da0:	40008000 	.word	0x40008000
 8003da4:	40013800 	.word	0x40013800
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40004400 	.word	0x40004400
 8003db0:	40004800 	.word	0x40004800
 8003db4:	40004c00 	.word	0x40004c00
 8003db8:	40005000 	.word	0x40005000
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a9f      	ldr	r2, [pc, #636]	@ (8004044 <UART_SetConfig+0x568>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d17a      	bne.n	8003ec2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d824      	bhi.n	8003e1e <UART_SetConfig+0x342>
 8003dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <UART_SetConfig+0x300>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e0f 	.word	0x08003e0f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e1f 	.word	0x08003e1f
 8003dfc:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e00:	f7ff f8d6 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003e04:	61f8      	str	r0, [r7, #28]
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b8f      	ldr	r3, [pc, #572]	@ (8004048 <UART_SetConfig+0x56c>)
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7ff f837 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8003e12:	61f8      	str	r0, [r7, #28]
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	61fb      	str	r3, [r7, #28]
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80fb 	beq.w	8004028 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d305      	bcc.n	8003e4e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e54:	e0e8      	b.n	8004028 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	022b      	lsls	r3, r5, #8
 8003e68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e6c:	0222      	lsls	r2, r4, #8
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6849      	ldr	r1, [r1, #4]
 8003e72:	0849      	lsrs	r1, r1, #1
 8003e74:	2000      	movs	r0, #0
 8003e76:	4688      	mov	r8, r1
 8003e78:	4681      	mov	r9, r0
 8003e7a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e7e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e90:	4650      	mov	r0, sl
 8003e92:	4659      	mov	r1, fp
 8003e94:	f7fc f998 	bl	80001c8 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea6:	d308      	bcc.n	8003eba <UART_SetConfig+0x3de>
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eae:	d204      	bcs.n	8003eba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	60da      	str	r2, [r3, #12]
 8003eb8:	e0b6      	b.n	8004028 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ec0:	e0b2      	b.n	8004028 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eca:	d15e      	bne.n	8003f8a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d828      	bhi.n	8003f26 <UART_SetConfig+0x44a>
 8003ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <UART_SetConfig+0x400>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f09 	.word	0x08003f09
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f27 	.word	0x08003f27
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f27 	.word	0x08003f27
 8003ef4:	08003f27 	.word	0x08003f27
 8003ef8:	08003f27 	.word	0x08003f27
 8003efc:	08003f1f 	.word	0x08003f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7ff f856 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003f04:	61f8      	str	r0, [r7, #28]
        break;
 8003f06:	e014      	b.n	8003f32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7ff f868 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003f0c:	61f8      	str	r0, [r7, #28]
        break;
 8003f0e:	e010      	b.n	8003f32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b4d      	ldr	r3, [pc, #308]	@ (8004048 <UART_SetConfig+0x56c>)
 8003f12:	61fb      	str	r3, [r7, #28]
        break;
 8003f14:	e00d      	b.n	8003f32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe ffb3 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8003f1a:	61f8      	str	r0, [r7, #28]
        break;
 8003f1c:	e009      	b.n	8003f32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f22:	61fb      	str	r3, [r7, #28]
        break;
 8003f24:	e005      	b.n	8003f32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d077      	beq.n	8004028 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005a      	lsls	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	441a      	add	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0f      	cmp	r3, #15
 8003f52:	d916      	bls.n	8003f82 <UART_SetConfig+0x4a6>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5a:	d212      	bcs.n	8003f82 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f023 030f 	bic.w	r3, r3, #15
 8003f64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	8afb      	ldrh	r3, [r7, #22]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	8afa      	ldrh	r2, [r7, #22]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e052      	b.n	8004028 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f88:	e04e      	b.n	8004028 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x506>
 8003f92:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <UART_SetConfig+0x4bc>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fff8 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	61f8      	str	r0, [r7, #28]
        break;
 8003fc2:	e014      	b.n	8003fee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7ff f80a 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003fc8:	61f8      	str	r0, [r7, #28]
        break;
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <UART_SetConfig+0x56c>)
 8003fce:	61fb      	str	r3, [r7, #28]
        break;
 8003fd0:	e00d      	b.n	8003fee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe ff55 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8003fd6:	61f8      	str	r0, [r7, #28]
        break;
 8003fd8:	e009      	b.n	8003fee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fde:	61fb      	str	r3, [r7, #28]
        break;
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fec:	bf00      	nop
    }

    if (pclk != 0U)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d019      	beq.n	8004028 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	085a      	lsrs	r2, r3, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d909      	bls.n	8004022 <UART_SetConfig+0x546>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d205      	bcs.n	8004022 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e002      	b.n	8004028 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004038:	4618      	mov	r0, r3
 800403a:	3728      	adds	r7, #40	@ 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40008000 	.word	0x40008000
 8004048:	00f42400 	.word	0x00f42400

0800404c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01a      	beq.n	8004162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800414a:	d10a      	bne.n	8004162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b098      	sub	sp, #96	@ 0x60
 8004194:	af02      	add	r7, sp, #8
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a0:	f7fc fd4e 	bl	8000c40 <HAL_GetTick>
 80041a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d12e      	bne.n	8004212 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f88c 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d021      	beq.n	8004212 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e062      	b.n	80042d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d149      	bne.n	80042b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	2200      	movs	r2, #0
 800422a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f856 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03c      	beq.n	80042b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	623b      	str	r3, [r7, #32]
   return(result);
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800424e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004258:	633b      	str	r3, [r7, #48]	@ 0x30
 800425a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800425e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e6      	bne.n	800423a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	60fb      	str	r3, [r7, #12]
   return(result);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800428c:	61fa      	str	r2, [r7, #28]
 800428e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	69b9      	ldr	r1, [r7, #24]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	617b      	str	r3, [r7, #20]
   return(result);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e011      	b.n	80042d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3758      	adds	r7, #88	@ 0x58
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	e04f      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d04b      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fc fca1 	bl	8000c40 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <UART_WaitOnFlagUntilTimeout+0x30>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e04e      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d037      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b80      	cmp	r3, #128	@ 0x80
 8004326:	d034      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d031      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d110      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2208      	movs	r2, #8
 8004342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f838 	bl	80043ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2208      	movs	r2, #8
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e029      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436c:	d111      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f81e 	bl	80043ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0a0      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b095      	sub	sp, #84	@ 0x54
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	61fb      	str	r3, [r7, #28]
   return(result);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	2b01      	cmp	r3, #1
 800442e:	d118      	bne.n	8004462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	60bb      	str	r3, [r7, #8]
   return(result);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0310 	bic.w	r3, r3, #16
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	613b      	str	r3, [r7, #16]
   return(result);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e6      	bne.n	8004430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004476:	bf00      	nop
 8004478:	3754      	adds	r7, #84	@ 0x54
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <memset>:
 8004482:	4402      	add	r2, r0
 8004484:	4603      	mov	r3, r0
 8004486:	4293      	cmp	r3, r2
 8004488:	d100      	bne.n	800448c <memset+0xa>
 800448a:	4770      	bx	lr
 800448c:	f803 1b01 	strb.w	r1, [r3], #1
 8004490:	e7f9      	b.n	8004486 <memset+0x4>
	...

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	@ (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	@ (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	@ (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	@ (80044d8 <__libc_init_array+0x44>)
 80044a8:	f000 f818 	bl	80044dc <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08004544 	.word	0x08004544
 80044d0:	08004544 	.word	0x08004544
 80044d4:	08004544 	.word	0x08004544
 80044d8:	08004548 	.word	0x08004548

080044dc <_init>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr

080044e8 <_fini>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr
